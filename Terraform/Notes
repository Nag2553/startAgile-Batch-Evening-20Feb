Install Terraform on lab:

wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

sudo apt update && sudo apt install terraform

if awscli package was not avliable run below commands
====================================================
 #curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o"awscliv2.zip"
 # apt install unzip
 # unzip awscliv2.zip
 # sudo ./aws/install


====================================================

Terraform Code is always written in the form of blocks:

There are different types of blocks:
Provider block
Resource block
Variable block
Output block
Association block
Nested block
Dynamic block
Local block
Provisioner block
Module block




Type of block “resourceName” “Unique BlockName” {
      Desired infra Code
}

1st block is Provider block
=================================================

Example:

provider "aws" {
  region     = "us-west-2"
  access_key = "my-access-key"
  secret_key = "my-secret-key"
}

https://registry.terraform.io/providers/hashicorp/aws/latest/docs


Demo1: Add provider block in the terraform code file and install the provider plugin

# mkdir myterraformfiles

# cd myterraformfiles

# vim aws_infra.tf

provider "aws" {
  region     = "us-east-1"
  access_key = ""
  secret_key = " "
}


Download the provider plugin, execute the below command

# terraform init
Demo 2: Store AWS credentials in a shared credentials file and then use it in the TF config file.
In this way your accesskey and secret key will not be exposed to the outside world.

# apt-get update

# apt-get install awscli -y

# aws configure

Give the valid access key

Give the valid secret key

Press enter, no need to give any region and format option
To verify if the credentials have been set for aws

# cat ~/.aws/credentials

Now create the provider block for terraform:
=====================================

# mkdir myterraformfiles

# cd myterraformfiles

# vim aws_infra.tf


provider "aws" {
  region = "us-east-1"
  shared_credentials_files =  ["~/.aws/credentials"]
}

Save the file and we will install aws provider plugin

# terraform init

Demo 3: Create the first resource to create EC2 server via terraform

# vim aws_infra.tf


Add this block of code

resource "aws_instance" "myec2" {

  ami           = "ami-063d43db0594b521b"
  instance_type = "t2.micro"

  tags = {
    Name = "Instance1"
  }
}
 
Save the file.

# terraform validate

# terraform plan
# terraform  apply --auto-approve

=========================================
Demo 4:
==========================================

Write a data block which will filter details and fetch AMI id from AWS

The fetched Ami id will be present in terraform.tfstate
Data block will not create any resource on AWS.
It is just a block that will filter AWS ami data based on your inputs and fetch it

Pass the fetched AMI ID form data block to aws_instance resource block.


Add below code in the file

# vim aws_infra.tf


data "aws_ami" "myami" {

most_recent      = true

owners           = ["amazon"]

 filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }


}


resource "aws_instance" "myec2" {

  ami           = data.aws_ami.myami.id
  instance_type = "t2.micro"

  tags = {
    Name = "Instance1"
  }


# terraform apply --auto-approve

========================================================
Variables in Terraform:
================================

Variables can be used to store any data
Variables are created using a block called as variable block.
This block can be written inside the configuration file or can be written in a separate file
A variable will store a single value or a list of values
A variable can have  an actual value and a default value.

Variable block Example:

variable “variableName” {
default = “variable value”
}


Demo:

# terraform destroy --auto-approve

Create a new file with name as variables.tf
# vim variables.tf

variable "region" {
 default = "us-east-1"

}

variable "instance_type"{

default = "t2.micro"

}

variable "env" {
default = "dev"
}


Now go to aws_infra.tf file. Replace values with variable 


provider "aws" {
  region     = var.region
  shared_credentials_files = ["~/.aws/credentials"]
}


data "aws_ami" "myami" {

most_recent      = true

owners           = ["amazon"]

 filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }


}


resource "aws_instance" "myec2" {

  ami           = data.aws_ami.myami.id
  instance_type = var.instance_type

  tags = {
    Name = var.env
  }
}


Save the file

# terraform plan

==========================================
Assignment:


variable "sg_ports" {

 default = [

{ from_port=80,to_port=89,protocol="tcp",cid_blocks="0.0.0.0/0" },
{ from_port=8080,to_port=8089,protocol="udp",cid_blocks="10.0.0.0/16" },
{ from_port=22,to_port=22,protocol="ssh",cid_blocks="10.0.0.0/20" },
{ from_port=443,to_port=443,protocol="tcp",cid_blocks="10.0.0.0/16" },
]

 }




resource "aws_security_group" "my-sg" {
  name        = "mysg"
  dynamic "ingress" {
  for_each = var.sg_ports
  content {
    from_port        = ingress.value.from_port
    to_port          = ingress.value.to_port
    protocol         = ingress.value.protocol
    cidr_blocks      = [ingress.value.cid_blocks]
    }

   }

  }

====================================================
# mkdir project-demo
# cd project-demo

# vim main.tf


provider "aws"{

region = "us-east-1"


}

resource "aws_vpc" "sa-vpc" {

 cidr_block = "10.0.0.0/16"

 tags = {
    Name = "sa-vpc"
  }

}

resource "aws_subnet" "sa-subnet" {

  vpc_id     = aws_vpc.sa-vpc.id

  depends_on = [aws_vpc.sa-vpc]

  cidr_block = "10.0.1.0/24"

  map_public_ip_on_launch = true

  tags = {
    Name = "sa-subnet"
  }

}

resource "aws_route_table" "sa-route-table" {
  vpc_id = aws_vpc.sa-vpc.id
 tags = {
    Name = "sa-route-table"
  }
}


resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.sa-subnet.id
  route_table_id = aws_route_table.sa-route-table.id
}


resource "aws_internet_gateway" "sa-gw" {
  vpc_id = aws_vpc.sa-vpc.id
  depends_on = [aws_vpc.sa-vpc]

  tags = {
    Name = "sa-gw"
  }
}


resource "aws_route" "sa-route" {
  route_table_id            = aws_route_table.sa-route-table.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.sa-gw.id
}

variable "sg_ports" {
type = list(number)
default = [8080,80,22,443]

}




resource "aws_security_group" "sa-sg" {
  name        = "sg_rule"
  vpc_id = aws_vpc.sa-vpc.id
  dynamic  "ingress" {
    for_each = var.sg_ports
    iterator = port
    content{
    from_port        = port.value
    to_port          = port.value
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    }
  }
egress {

    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]


}

}


resource "tls_private_key" "mykey" {

 algorithm = "RSA"

}

resource "aws_key_pair" "web-key" {
  key_name   = "web-key"
  public_key = tls_private_key.mykey.public_key_openssh


}


resource "aws_instance" "myec2" {

tags = {
 Name = "terraform-Project"

}

ami = "ami-0a9a48ce4458e384e"
instance_type = "t2.micro"
key_name = "web-key"
subnet_id = aws_subnet.sa-subnet.id
security_groups = [aws_security_group.sa-sg.id]

provisioner "remote-exec"{

connection{

    type     = "ssh"
    user     = "ec2-user"
    private_key = tls_private_key.mykey.private_key_pem
    host     = self.public_ip

 }

inline = [
  "sudo yum install httpd -y",
  "sudo systemctl start httpd",
  "sudo systemctl enable httpd",
  "sudo yum install git -y"


]

}


}




# terraform init

# terraform apply 





















