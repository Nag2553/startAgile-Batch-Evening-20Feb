Configuration:
====================

making changes like:

- installing packages
- updating config files
- copying new files
- creation of users, groups
- giving permissions
- deploying applications
- execution of scripts

If we have to do these tasks in 200 servers manually

 - time consuming
 - error prone
 - application may crash
 - all updates may not be available
 - difficult to keep track of all the steps that we have executed
 - to be done on different OS seperatly

Automation is and has always been an important part of DevOps in order to accelerate faster deployments and Innovations.
It will allow the teams to perform and complete repeated tasks in less time.

Configuration management : 
> Using an automation tool to make changes on several servers in different environment in less time. Thereby bringing in consistency across all the servers
> It also means making sure all the servers have the desired state of changes at any given point of time.
> If desired configuration is not available, the tool should identify that and make the correct configuration change on the servers.
> Infrastructure should be available for CM tools to make changes
> when we use CM tools we write code to provide the details of desired changes on servers
> The code can be version controlled and shared with team members


Various CM tools :
================

Pull approach:
=============
Puppet
Chef

Push approach:
================
Saltstack
Ansible

=======================

Ansible:
========================

It is an open source tool for deploying and making configuration changes to application
It is a very simple and easy to work tool
Ansible is a command tool in open source version
There is a GUI of it available -> Ansible tower -> available with enterprise version of ansible
Ansible is a product of RedHat and hence it always installed on Linux OS
It is python based tool, so we need Python on every server
In ansible the code is written using YAML
Ansible is an agent less tool
It also supports cloud based infrastructure.

=============================
Ansible Components:
=============================

Inventory: WHERE To Do the Changes
==============================

Inventory is a simple file which is available by default in ansible
The default name of inventory file -> hosts
This file is available in directory -> /etc/ansible
In this file we will write the list of IP address or hostnames of the servers where ansible has to make the changes
Only and only if the IP of the host is present in this file, ansible will be able to connect and make changes on it.
We can also create inventory file with any name in any location of the ansible controller

There are 2 types of inventory files:
========================

1. Static inventory file
==========================
if we have an infrastructure that is not autoscaling
The number of servers are limited 
Then user can create the inventory file and update the list of ipaddress

2. Dynamic Inventory file
==========================
if we have an infrastructure that is  autoscaling
The number of servers are many
In this case manually updating the inventory file is difficult
So we use the process of dynamically generate the inventory file 
In this case ansible will automatically compute the list of hostnames that are part of inventory

=======================
Modules: WHAT changes to do on host servers
=======================

Modules are nothing but python scripts(pre written code of ansible) that are pushed to host servers to make changes
these modules are python code that accepts some input parameters form the user to configure the desired changes on the host server
Ansible will copy this python code with users input data on the host server and configuration changes will be done

Example:
=============

COPY(sourcefilePath, destfilepath)

copy: src=/tmp/file1 dest=/etc/file1

There are 4000+ modules in ansible

We can also create our own modules using python.

====================================

Ansible.cfg file
==============================
This file consists of parameters of ansible settings and configuration of ansible
> defaults
> previllages

This file is present in the directory /etc/ansible
and has a name ansible.cfg
The name of the file always remain the same
You can create ansible.cfg file in any directory. Preferably in the directory where your inventory file and ansible code is present



Playbook
===================
Ansible code for configuration changes is written in Playbook

Playbooks are then written in YAML

the format is => key: value

in the playbook we have 2 main sections:

 hosts => host details to be fetched from inventory where changes are done
 tasks => modules that have to be executed.


playbook code --> it is executed --> it is converted to python code--> this code is copied on desired host using SSH ==> ansible then executes the code on each host parallely ==> after code is executed => this python code is deleted on every host by ansible

=========================
SETUP ANSIBLE


Create 2 Ubuntu 22  EC2 machines on AWS with instance_type as t2.micro


Letâ€™s us Install Ansible on this Machine: Execute on master Node
********************************************************
# ansible --version

Setup Ansible:


#  sudo apt-get install -y software-properties-common
#  sudo apt-add-repository ppa:ansible/ansible
It will ask for Press [ENTER] to continue or Ctrl-c to cancel.
Now press enter key on your keyboard

#  sudo apt-get update
#  sudo apt-get install -y ansible


Install ansible on other OS :

https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html#installing-ansible-on-ubuntu


Step 1: Execute on Master terminal
===============================================


Create a new user on the terminal:


# adduser ansiuser


Enter New password :  ansiuser
Retype new Password: ansiuser


Donâ€™t enter any value for fullname, room number, workphone, homephone other


Just keep pressing enter key.	


And give Y  for 


Is the information correct ? [Y/n]  : y









User will now be created.




Add ansiuser in sudoers files and give all permission
# vim /etc/sudoers
Press i
Scroll down until your find : # User privilege specification
Now enter below line under ðŸ¡º root    ALL=(ALL:ALL) ALL
ansiuser ALL=NOPASSWD: ALL

Save the file.

Generate SSH key on Master machine and copy SSH key on worker machine
All These Steps will be executed on Master Machine only
**********************

Step 1: 
Change user from root to ansiuser
#   su - ansiuser


Step 2:
Generate ssh key on Master node for ansiuser
Execute below command:
# ssh-keygen
# ssh-keygen -t rsa  #keygeneration in rsa formate

press enter
press enter
press enter

ssh key will be generated

====================================
Steps to be executed on Worker Node:
=======================================


# sudo su -

Create a new user on the terminal:


# adduser ansiuser


Enter New password :  ansiuser
Retype new Password: ansiuser


Donâ€™t enter any value for fullname, room number, workphone, homephone other


Just keep pressing enter key.	


And give Y  for 


Is the information correct ? [Y/n]  : y









User will now be created.

===============================================
Step 2:

We will give sudo permission to this user so that it can execute linux commands without need of password

Add ansiuser in sudoers files and give all permission
# vim /etc/sudoers
Press i
Scroll down until your find : # User privilege specification
Now enter below line under ðŸ¡ºroot    ALL=(ALL:ALL) ALL
ansiuser ALL=NOPASSWD: ALL


Now switch to ansiuser on worker node and create .ssh folder

# su - ansiuser

# mkdir .ssh

# ls -al


====================================
Go to master node(devops lab) and copy the ssh public key of ansiuser

# cat /home/ansiuser/.ssh/id_rsa.pub

Carefully copy the key


Go to Worker node (AWS VM)

# echo "<give your public key>" >> ~/.ssh/authorized_keys

Great job, the setup is complete

Inventory File:
------------------
Inventory is a simple file which is updated by the ansible admin with hostnames or Ip address of host servers.
The default name of this file is hosts
The default location of hosts file is /etc/ansible


By default the inventory file for ansible will be available at /etc/ansible directory
Demo:
Currently we are logged in as ansiuser.
Lets create an inventory file in home directory of ansiuser which is /home/ansiuser

# cd
# pwd



Lets create a file with name as myinventory and create host group inside it

# sudo vim myinventory
Press i to insert below data

[webserver]
172.31.26.98 => <private ip worker1>
172.31.22.35 => <private ip worker2>

Save the file.


Execute on Ansible Controller machine

Execute adhoc command using the current inventory file
=======================================
# cd
# pwd
/home/ansiuser
In this directory letâ€™s create an inventory file
# sudo vim myinventory
Make following entry in the file:

[webserver]
172.31.47.98
172.31.42.13

Save the file (:wq!)

Syntax:
ansible -i /pathtoinventoryfile  groupname -m modulename

execute this command:
#   ansible -i /home/ansiuser/myinventory webserver -m ping



Letâ€™s see a demo where we make this inventory file as your default inventory file.
We will create a new ansible.cfg file in the same directory of ansiuser and set up the inventory file location.

#   sudo vim ansible.cfg
Press i  and enter below data
[defaults]
inventory = /home/ansiuser/myinventory

Save the file.



Now execute the adhoc command without giving the path of inventory file.

# ansible webserver -m ping


Note: Ansible always looks in the current directory for ansible.cfg file from which it gets the details of inventory file path. otherwise it checks for the inventory file in the /etc/ansible directory.




vim playbook1.yml

- name: Debug module of Ansible
  hosts: webserver
  tasks:
  - name: Print a message on the controller
    debug: msg="Hello to Ansible Controller"

# vim  playbook2.yml

- name: execute a command
  hosts: webserver
  become: true
  tasks:
  - name: Execute a command on Worker nodes
    command: hostname -s
    register: command_output
  - name: Print the register variable
    debug: var=command_output

# vim playbook3.yml

- name: Install git on the worker node
  hosts: webserver
  become: true
  become_user: root # the ansiusers permissions are excalted to be root like sudo apt-get update
  tasks:
  - name: Update the apt repo
    command: apt-get update
  - name: Install git on workers
    package: name=git state=present
  - name: Install maven on workers
    package: name=maven state=present
  - name: Install apache2 server
    package: name=apache2 state=present

# vim playbookapache2.yml

- name: Deploy HTML code
  hosts: webserver
  become: true
  tasks:
  - name: Install package on the Server
    package: name=apache2 state=absent
  - name: Start the apache2 service
    service: name=apache2 state=stopped
  - name: Deploy HTML code on the apache2 server   # this is parent task
    copy: src=index.html dest=/var/www/html
    notify: Restart apache2 server
  handlers:    # these are child tasks, they are executed when called by parent task
  - name: Restart apache2 server
    service: name=apache2 state=restarted
# vim nginxdeploy.yml

- name: Deploy on nginx
  hosts: webserver
  become: true
  vars:
   http_port: 80
   document_root: /var/www/html
  tasks:
  - name: Install nginx
    package: name=nginx state=present
  - name: Start Nginx
    service: name=nginx state=started
  - name: Copy the index.html file
    copy: src=index.html dest=/var/www/html
  handlers:
  - name: Restart nginx service
    service: name=nginx state=restarted

# vim playbookjava.yml

- name: Install java and mavane on worker nodes
  hosts: webserver
  become: true
  tasks:
  - name: update apt-get repo
    command: apt-get update
  - name: Install multiple packages
    package: name={{item}} state=present
    loop: # repeat the module again and again for each loop item value
     - openjdk-11-jdk
     - maven
     - nano
     - tree
     - php


Docker Playbook:
========================


- name: Creation of docker containers
  hosts: webserver
  become: true
  become_user: root
  tasks:
  - name: Install multiple package
    package: name={{item}} state=present
    loop:
     - git
     - docker.io
  - name: State docker service
    service: name=docker state=started
  - name: pull the image
    command: docker pull nginx
  - name: run the image
    command: docker run -d -P nginx

====================================
Handlers:


- name: handlers in Ansible
  hosts: webserver
  become: true
  tasks:
  - name: Notify task for starting the service
    command: echo "Service started"
    notify: start multiple services
  - name: Copy a file
    copy: src=index.html dest=/tmp/index.html
    notify: Print copy status
  handlers:
  - name: Print copy status
    debug: msg="File copied successfully"
  - name: start multiple services
    service: name={{item}} state=restarted
    loop:
     - apache2
     - docker




